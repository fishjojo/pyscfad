[build-system]
requires = [
    "scikit-build-core",
    "nanobind",
    "jax>=0.4.31,<=0.4.35",
    "nvidia-cublas-cu12>=12.1.3.1",
    #"nvidia-cuda-cupti-cu12>=12.1.105",
    "nvidia-cuda-nvcc-cu12>=12.6.85",
    "nvidia-cuda-runtime-cu12>=12.1.105",
    #"nvidia-cudnn-cu12>=9.1,<10.0",
    #"nvidia-cufft-cu12>=11.0.2.54",
    "nvidia-cusolver-cu12>=11.4.5.107",
    "nvidia-cusparse-cu12>=12.1.0.106",
    #"nvidia-nccl-cu12>=2.18.1",
    "nvidia-nvjitlink-cu12>=12.1.105",
]
build-backend = "scikit_build_core.build"

[project]
name = "pyscfadlib"
dynamic = ["version"]
description = "Support library for PySCFAD"
readme = "README.md"
requires-python = ">=3.10"
authors = [
    { name = "Xing Zhang", email = "zhangxing.nju@gmail.com" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Topic :: Scientific/Engineering",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
dependencies = [
    "numpy>=1.17",
    "nanobind",
    "jax>=0.4.31,<=0.4.35",
    "jaxlib>=0.4.31,<=0.4.35",
    "nvidia-cublas-cu12>=12.1.3.1",
    #"nvidia-cuda-cupti-cu12>=12.1.105",
    "nvidia-cuda-nvcc-cu12>=12.6.85",
    "nvidia-cuda-runtime-cu12>=12.1.105",
    #"nvidia-cudnn-cu12>=9.1,<10.0",
    #"nvidia-cufft-cu12>=11.0.2.54",
    "nvidia-cusolver-cu12>=11.4.5.107",
    "nvidia-cusparse-cu12>=12.1.0.106",
    #"nvidia-nccl-cu12>=2.18.1",
    "nvidia-nvjitlink-cu12>=12.1.105",
]

[project.urls]
Homepage = "https://github.com/fishjojo/pyscfad"
Repository = "https://github.com/fishjojo/pyscfad"
Documentation = "https://fishjojo.github.io/pyscfad/index.html"

[tool.scikit-build.metadata.version]
provider = "scikit_build_core.metadata.regex"
input = "pyscfadlib/version.py"

[tool.scikit-build]
cmake.source-dir = "pyscfadlib"

[tool.cibuildwheel]
build-verbosity = 1

#test-requires = ["pytest", "pyscf>=2.3", "jax>=0.4.31,<=0.4.35"]
#test-command = "pytest {package}/test"
#test-skip = "cp311-macosx_arm64"

container-engine = "docker"
manylinux-x86_64-image = "manylinux_2_28"
skip = ["pp*", "*musllinux*"]

[tool.cibuildwheel.config-settings]
"build-dir" = "build/{wheel_tag}"

[tool.cibuildwheel.linux]
#archs = ["x86_64", "aarch64"]
#before-all = [
#    "ulimit -n 1024",
#    "ln -s libquadmath.so.0 /usr/lib64/libquadmath.so",
#    "yum install -y yum-utils",
#    "yum install -y epel-release",
#    "yum-config-manager --enable epel",
#    "yum install -y openblas-devel",
#]
#repair-wheel-command = "{package}/tools/repair_wheel_linux.sh {dest_dir} {wheel}"
repair-wheel-command = "auditwheel -v repair -w {dest_dir} {wheel}"

[tool.cibuildwheel.macos]
archs = ["auto64"]
repair-wheel-command = "delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}"

